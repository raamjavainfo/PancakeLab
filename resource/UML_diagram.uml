@startuml

' Define classes
class PancakeService {
    - orders: List<Order>
    - completedOrders: Set<UUID>
    - preparedOrders: Set<UUID>
    - pancakes: List<PancakeRecipe>

    + createOrder(building: int, room: int): Order
    + addDarkChocolatePancake(orderId: UUID, count: int): void
    + addDarkChocolateWhippedCreamPancake(orderId: UUID, count: int): void
    + addDarkChocolateWhippedCreamHazelnutsPancake(orderId: UUID, count: int): void
    + addMilkChocolatePancake(orderId: UUID, count: int): void
    + addMilkChocolateHazelnutsPancake(orderId: UUID, count: int): void
    + viewOrder(orderId: UUID): List<String>
    + removePancakes(description: String, orderId: UUID, count: int): void
    + cancelOrder(orderId: UUID): void
    + completeOrder(orderId: UUID): void
    + listCompletedOrders(): Set<UUID>
    + prepareOrder(orderId: UUID): void
    + listPreparedOrders(): Set<UUID>
    + deliverOrder(orderId: UUID): Object[]
}

class Order {
    - id: UUID
    - building: int
    - room: int
}

abstract class PancakeRecipe {
    - orderId: UUID
    + description(): String
}

class DarkChocolatePancake extends PancakeRecipe
class DarkChocolateWhippedCreamPancake extends PancakeRecipe
class DarkChocolateWhippedCreamHazelnutsPancake extends PancakeRecipe
class MilkChocolatePancake extends PancakeRecipe
class MilkChocolateHazelnutsPancake extends PancakeRecipe

' Define relationships
PancakeService "1" -- "0..*" Order : manages >
PancakeService "1" -- "0..*" PancakeRecipe : manages >
PancakeRecipe <|-- DarkChocolatePancake
PancakeRecipe <|-- DarkChocolateWhippedCreamPancake
PancakeRecipe <|-- DarkChocolateWhippedCreamHazelnutsPancake
PancakeRecipe <|-- MilkChocolatePancake
PancakeRecipe <|-- MilkChocolateHazelnutsPancake
Order "1" -- "0..*" PancakeRecipe : contains >

@enduml
